package fr.epita.quiz.services.data;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;

import fr.epita.quiz.datamodel.Answer;
import fr.epita.quiz.datamodel.Question;
import fr.epita.quiz.datamodel.Quiz;
import fr.epita.quiz.datamodel.Mcqanswer;
import fr.epita.quiz.exception.CreateFailedException;
import fr.epita.quiz.exception.SearchFailedException;
import fr.epita.quiz.services.ConfigurationService;
import fr.epita.quiz.logger.Logger;

/**
 * 
 * @author emmanuel
 * Creates a new logger from  JDBCO
 * String Search query
 * Delete query
 * URL, password, user name
 * 
 *
 */


public class QuizJDBCDAO {
	static Logger JDBCO = new Logger("QUIZJDBCO LOGGER");
	private static final String SEARCH_QUERY = "select NAME from QUIZ where NAME LIKE ?";
	private static final String DELETE_QUERY = "DELETE FROM QUIZ  WHERE ID = ?";

	private String url;
	private String password;
	private String username;
	
	//private String INSERT_QUIZ = "INSERT into QUIZ (NAME) values(?)";
	private String INSERT_QUESTION = "INSERT into QUESTION (QUESTION, DIFFICULTY) values (?, ?)";
	private String INSERT_QUIZ_QUESTION = "INSERT into QUIZ_QUESTION (NAME) values (?)";
	private String INSERT_ANSWER = "INSERT into ANSWER (ANSWER, Q_ID) values ( ? , (SELECT Q_ID FROM QUESTION ORDER BY Q_ID DESC LIMIT 1) )";
	private String INSERT_QUESTION_ANSWER = "INSERT into QUESTION_ANSWERS(Q_ID, ANSWER_ID) values( (SELECT Q_ID FROM QUESTION ORDER BY Q_ID DESC LIMIT 1), SELECT MAX(ANSWER_ID) FROM ANSWER )";
	private String INSERT_TOPIC = "INSERT into TOPIC(NAME) values (?)";
	private String INSERT_TOPIC_QUESTION = "INSERT into TOPIC_QUESTION(Q_ID, T_ID) values ((SELECT Q_ID FROM question ORDER BY Q_ID DESC LIMIT 1), SELECT MAX(T_ID) FROM TOPIC  )";
	
	private String INSERT_OPEN_QUESTION = "insert into OPENANSWER(open_ans_id, answer, answer_id) values ( (SELECT q_id FROM question ORDER BY q_id DESC LIMIT 1), ? ,(SELECT answer_id FROM answer ORDER BY answer_id DESC LIMIT 1))";
	
	private String INSERT_MCQQUESTION = "insert into mcqquestion(question, difficulty, name) values (?, ?, ?)";
	private String INSERT_MCQANSWER = "insert into mcqanswer(question_id, option1, option2, option3, option4) values ((SELECT question_id FROM mcqquestion ORDER BY question_id DESC LIMIT 1),?,?,?,?)";
	private String INSERT_OPTION = "insert into options(answer_id, question_id, right_option) values ((SELECT answer_id FROM mcqanswer ORDER BY answer_id DESC LIMIT 1), (SELECT question_id FROM mcqquestion ORDER BY question_id DESC LIMIT 1),?)";
	private String INSERT_MCQ_TOPIC = "insert into MCQ_TOPIC(topics) values(?)";
	private String INSERT_MCQ_TOPIC_QUESTION = "insert into MCQ_TOPIC_QUESTION(question_id, topic_id) values ((SELECT question_id FROM mcqquestion ORDER BY question_id DESC LIMIT 1), (SELECT topic_id FROM mcq_topic ORDER BY topic_id DESC LIMIT 1))" ;

	
	private String GET_MCQ_QUESTION_ANSWER = "SELECT quiz.name, mcqquestion.question, mcqanswer.option1, mcqanswer.option2, mcqanswer.option3, mcqanswer.option4, options.right_option from mcqquestion join mcqanswer on mcqquestion.question_id = mcqanswer.question_id join options on mcqanswer.question_id = options.question_id join quiz on quiz.name = (?)";
	private String GET_SINGLE_QUESTION = "select question, answer.answer from question join answer on answer.q_id = question.q_id join quiz_question on question.q_id = quiz_question.q_id join quiz on quiz_question.name = ?";
	
	private String GET_ALL_QUIZ = "Select * from quiz";
	private String SEARCH_TOPIC = "select question.question from question join topic_question on question.q_id = topic_question.q_id join topic on topic.t_id = topic_question.q_id where topic.name LIKE ?";
	
	private String SET_FOREIGN_KEY_CHECK_OFF = "SET FOREIGN_KEY_CHECKS=0";
	private String UPDATE_QUIZ = "UPDATE QUIZ SET NAME=? WHERE QUIZ.NAME = ?";
	private String UPDATE_QUIZ_QUESTION = "UPDATE QUIZ_QUESTION SET NAME = ? WHERE QUIZ_QUESTION.NAME = ?";
	private String UPDATE_MCQ_QUESTION = "UPDATE MCQQUESTION SET NAME=? WHERE MCQQUESTION.NAME=?";
	private String SET_FOREIGN_KEY_CHECK_ON = "SET FOREIGN_KEY_CHECKS=1";
	
	/**
	 * 
	 * QUIZJBBCO 
	 * Gets user name password and url from config file
	 * @throws IOException 
	 */
	
	
	public QuizJDBCDAO() throws IOException {
		ConfigurationService conf = ConfigurationService.getInstance();
		this.username = conf.getConfigurationValue("db.username", "");
		this.password = conf.getConfigurationValue("db.password", "");
		this.url = conf.getConfigurationValue("db.url", "");
		
		
		Properties props = new Properties();
		File confFile = new File("conf.properties");
		FileInputStream ips = new FileInputStream(confFile);
		props.load(ips);
		
		//using the properties
		String INSERT_QUIZ = props.getProperty("db.password", "");
		
		//this.INSERT_QUIZ = conf.getConfigurationValue("db.INSERT_QUIZ", "");
		//this.INSERT_QUESTION = conf.getConfigurationValue("db.INSERT_QUESTION", "");
		//this.INSERT_QUIZ_QUESTION = conf.getConfigurationValue("db.INSERT_QUIZ_QUESTION", "");
		//this.INSERT_ANSWER = conf.getConfigurationValue("db.INSERT_ANSWER", "");
		//this.INSERT_QUESTION_ANSWER = conf.getConfigurationValue("db.INSERT_QUESTION_ANSWER", "");
		//this.INSERT_TOPIC = conf.getConfigurationValue("db.INSERT_TOPIC", ""); 
		//this.INSERT_TOPIC_QUESTION = conf.getConfigurationValue("db.TOPIC_QUESTION", "");

	}
/**
 * Connection manager
 * @return
 * @throws SQLException
 */
	private Connection getConnection() throws SQLException {
		Connection connection = DriverManager.getConnection(this.url, this.username, this.password);
		return connection;
	}

	/**
	 * Creates a quiz in the database, if a problem occurs then it throws an
	 * {@link CreateFailedException} usage example: QuizJDBCDAO dao = new ... try{
	 * dao.create(quizInstance); }catch(CreateFailed e){ //log exception }
	 * 
	 * @param quiz
	 * @throws CreateFailedException
	 */
public void create(Quiz quiz) throws CreateFailedException {
		try  (Connection connection = getConnection()) 
			{
			
			
			PreparedStatement pstmt = connection.prepareStatement(INSERT_QUIZ);
			pstmt.setString(1, quiz.getTitle());
			pstmt.execute();
			
			
			
		} catch (org.h2.jdbc.JdbcSQLException sqle) {
			
			System.out.println("Quiz name exists / or has been added wanna add questions ?");
			JDBCO.logAlert("primary key violation User entered quiz that existed");

		}catch (SQLException sqle) {	
			JDBCO.logError("Create Quiz failed");
			throw new CreateFailedException(quiz);
		} 

	}
	

/**
 * Creates a quiz question  in the database, if a problem occurs then it throws an
 * {@link CreateFailedException} usage example: QuizJDBCDAO dao = new ... try{
 * dao.create(quizInstance); }catch(CreateFailed e){ //log exception }
 * Insert Question, insert quiz question and answer, topics and topic question
 * Log if there is a problem creating the quiz
 * 
 * @param quiz
 * @throws CreateFailedException
 **/
public void createAll(Quiz quiz, Answer answer, Question question ) throws CreateFailedException {
		
		try  (Connection connection = getConnection()) 
		{
			
		create(quiz);
		
		PreparedStatement pstmt2 = connection.prepareStatement(INSERT_QUESTION);
		pstmt2.setString(1, question.getContent());
		pstmt2.setInt(2, question.getDifficulty());
		pstmt2.execute();
		
		PreparedStatement pstmt3 = connection.prepareStatement(INSERT_QUIZ_QUESTION);
		pstmt3.setString(1, quiz.getTitle());
		pstmt3.execute();
		
		PreparedStatement pstmt4 = connection.prepareStatement(INSERT_ANSWER);
		pstmt4.setString(1, answer.getText());
		pstmt4.execute();
		
		PreparedStatement pstmt5 = connection.prepareStatement(INSERT_QUESTION_ANSWER);
		pstmt5.execute();
		
		PreparedStatement pstmt6 = connection.prepareStatement(INSERT_TOPIC);
		pstmt6.setString(1, Arrays.toString(question.getTopics()));
		pstmt6.execute();
		
		PreparedStatement pstmt7 = connection.prepareStatement(INSERT_TOPIC_QUESTION);
		pstmt7.execute();
		
		
	} catch (org.h2.jdbc.JdbcSQLException sqle) {
		
		System.out.println("This question has been sucessfully added");
		JDBCO.logAlert("CREATE ALL CLASS : Insert failed user tried adding existing quiz : primay key violation");
	} catch (SQLException sqle) {
		throw new CreateFailedException(quiz);
	}
	}
/**
 * Creates a openAnswer in the database, if a problem occurs then it throws an
 * {@link CreateFailedException} usage example: QuizJDBCDAO dao = new ... try{
 * dao.create(quizInstance); }catch(CreateFailed e){ //log exception }
 *  This just links with the createAll class only indicating its an open question in the database
 * @param quiz
 * @throws CreateFailedException
 * 
 **/
	
public void addOpenQuestion(Answer answer, Quiz quiz) throws CreateFailedException {
		try  (Connection connection = getConnection()) 
		{
			
		PreparedStatement pstmt = connection.prepareStatement(INSERT_OPEN_QUESTION);
		pstmt.setString(1, answer.getText());
		pstmt.execute();
		
	} catch (SQLException sqle) {
		JDBCO.logError("Error inserting open questions");
		sqle.printStackTrace();
		throw new CreateFailedException(answer);
	}	
	}
		

/**
 * Creates a multiple choice quiz in the database, if a problem occurs then it throws an
 * {@link CreateFailedException} usage example: QuizJDBCDAO dao = new ... try{
 * dao.create(quizInstance); }catch(CreateFailed e){ //log exception }
 * INSERTS MCQQUESTION, ANSWER, TOPICS and topic question
 * @param quiz
 * @throws CreateFailedException
 **/

public void addMcqQuestion(Quiz quiz, Mcqanswer mcqanswer, Question question2 ) throws CreateFailedException {
		try  (Connection connection = getConnection()) 
		{
		
		create(quiz);
				
		PreparedStatement pstmt1 = connection.prepareStatement(INSERT_MCQQUESTION);
		pstmt1.setString(1, question2.getContent());
		pstmt1.setInt(2, question2.getDifficulty());
		pstmt1.setString(3, quiz.getTitle());
		pstmt1.execute();
		
		PreparedStatement pstmt2 = connection.prepareStatement(INSERT_MCQANSWER);
		pstmt2.setString(1, mcqanswer.getOption1());
		pstmt2.setString(2, mcqanswer.getOption2());
		pstmt2.setString(3, mcqanswer.getOption3());
		pstmt2.setString(4, mcqanswer.getOption4());
		pstmt2.execute();
		
		PreparedStatement pstmt3 = connection.prepareStatement(INSERT_OPTION);
		pstmt3.setString(1, mcqanswer.getRightoption());
		pstmt3.execute();
		
		PreparedStatement pstmt4 = connection.prepareStatement(INSERT_MCQ_TOPIC);
		pstmt4.setString(1, Arrays.toString(question2.getTopics()));
		pstmt4.execute();
		
		PreparedStatement pstmt5 = connection.prepareStatement(INSERT_MCQ_TOPIC_QUESTION);
		pstmt5.execute();
		
		
	} catch (org.h2.jdbc.JdbcSQLException sqle) {
		
		System.out.println("Quiz name exists, consider adding questions instead s'il vous plait ?");
		
	} catch (SQLException sqle) {
		JDBCO.logError("Error from mcqanswer could not insert primary key constraint");
		throw new CreateFailedException(mcqanswer);
	}	
	}
	
/**
 * updates a quiz in the database, if a problem occurs then it throws an
 * {@link Exception} usage example: {
 * dao.update(string update from , string updateTo); }catch(CreateFailed e){ //log exception }
 * 
 * @param quiz
 * @throws CreateFailedException
 **/
public void update(String updateFrom, String updateTo) throws Exception{
		try (Connection connection = getConnection();
				
				) {
			PreparedStatement pstmt = connection.prepareStatement(SET_FOREIGN_KEY_CHECK_OFF);
			PreparedStatement pstmt1 = connection.prepareStatement(UPDATE_QUIZ);
			PreparedStatement pstmt2 = connection.prepareStatement(UPDATE_QUIZ_QUESTION);
			PreparedStatement pstmt3 = connection.prepareStatement(UPDATE_MCQ_QUESTION);
			PreparedStatement pstmt4 = connection.prepareStatement(SET_FOREIGN_KEY_CHECK_ON);
			
			pstmt.execute();
			
			pstmt1.setString(1, updateTo);
			pstmt1.setString(2, updateFrom);
			pstmt1.executeUpdate();
			
			pstmt2.setString(1, updateTo);
			pstmt2.setString(2, updateFrom);
			pstmt2.executeUpdate();
			
			
			pstmt3.setString(1, updateTo);
			pstmt3.setString(2, updateFrom);
			pstmt3.executeUpdate();
			
			pstmt4.execute();
		
		} catch (SQLException sqle) {
		
		}

	}
/**
 * Deletes a quiz in the database, if a problem occurs then it throws an
 * {@link SearchFailedException} {
 * dao.delete(quizInstance); }catch(CreateFailed e){ //log exception }
 * 
 * @param quiz
 * @throws CreateFailedException
 **/

public void delete(Quiz quiz) {
		try (Connection connection = getConnection();
				PreparedStatement pstmt = connection.prepareStatement(DELETE_QUERY);) {
			pstmt.setInt(1, quiz.getId());
			pstmt.execute();
		} catch (SQLException sqle) {
			// TODO transform into UpdateFailedException
		}
	}
/**
 * gets all quiz in the database, if a problem occurs then it throws an
 * {@link CreateFailedException}{
 * dao.getAllQuiz(); }catch(CreateFailed e){ //log exception }
 * 
 * @param quiz
 * @throws CreateFailedException
 *
 **/

public List<String> getAllQuiz() throws SearchFailedException {
	ArrayList<String> quizzes = new ArrayList<String>();
	try  (Connection connection = getConnection()) 
	{
	
	PreparedStatement pstmt = connection.prepareStatement(GET_ALL_QUIZ);
	ResultSet rs = pstmt.executeQuery();
	while (rs.next()) {
		String quiz = rs.getString("NAME");

		quizzes.add(quiz);
	
	
	}
	rs.close();
	return quizzes;
	
} catch (org.h2.jdbc.JdbcSQLException sqle) {
	
	System.out.println("Quiz does not exist");
	JDBCO.logAlert("QUIZ does not exist in the database");

}catch (SQLException sqle) {	
	JDBCO.logError("Create Quiz failed");
}
	return quizzes; 
	}
/**
 * Searches for a quiz in the database, if a problem occurs then it throws an
 * {@link SearchFailedException} usage example: QuizJDBCDAO dao = new ... try{
 * dao.search(String quiz name); }catch(CreateFailed e){ //log exception }
 * 
 * @param quiz
 * 
 * @throws CreateFailedException	
 **/
public List<String> search(String partName) throws SearchFailedException {

		List<String> quizList = new ArrayList<>();
		try (Connection connection = getConnection();
				PreparedStatement pstmt = connection.prepareStatement(SEARCH_QUERY)) {

			pstmt.setString(1, "%" + partName + "%");

			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String topic = rs.getString("NAME");
				quizList.add(topic);
			}

			rs.close();
		} catch (SQLException e) {
			JDBCO.logError("Search for quiz failed");
			JDBCO.logAlert("Access to database failed");
			System.out.println("Quiz not found");
		}
		return quizList; 
		}
/**
 * Creates a quiz in the database, if a problem occurs then it throws an
 * {@link CreateFailedException} usage example: QuizJDBCDAO dao = new ... try{
 * dao.searchTopic(quizInstance); }catch(CreateFailed e){ //log exception }
 * 
 * @param quiz
 * @throws SearchFailedException
 *
 **/
public List<String> searchTopic(String partName) throws SearchFailedException {

	List<String> quizList = new ArrayList<>();
	try (Connection connection = getConnection();
			PreparedStatement pstmt = connection.prepareStatement(SEARCH_TOPIC)) {

		pstmt.setString(1, "%" + partName + "%");

		ResultSet rs = pstmt.executeQuery();
		while (rs.next()) {
			String topic = rs.getString("question");
			quizList.add(topic);
		}

		rs.close();
	} catch (SQLException e) {
		JDBCO.logError("Search using topics failed");
		JDBCO.logAlert("Access to database failed");
		System.out.println("Quiz not found");
		e.printStackTrace();
	}
	return quizList; 
	}

/**
 * Authenticates the user against the database
 * returns an object with user type and if authenticated
 * @param scanner connection
 * @throws CreateFailedException
 **/
public static Object[] authenticate(Scanner scanner, Connection connection) {
		System.out.println("Please enter your login : ");
		String login = scanner.nextLine();
		System.out.println("Please enter your password : ");
		String password = scanner.nextLine();
		
		Object object[] = new Object[2];
		
		boolean result = false;
		
		try {
			
			PreparedStatement pstmt1 = connection.prepareStatement("SELECT * from USER where username=? and password = ?");
			pstmt1.setString(1,login);
			pstmt1.setString(2, password);
			ResultSet rs = pstmt1.executeQuery();
			
			
			while(rs.next()) {
					
				result = rs.getString(1).equals(login) && rs.getString(2).equals(password);
				
				object[0] = result;
				object[1] = rs.getInt(3);
				
				if ( rs.next() ) {
					System.out.println("USER DOES NOT EXIT");
					
				}else {
					
					System.out.println("LOGGED IN");
					
 				}
				object[2] = login;
				return object;
			}
			
			return object;	
		} catch (Exception e) {
			
		}
		return object;
	}
	
/**
 * quiz session gets all mcq quiz with the desired name in the database, if a problem occurs then it throws an
 * {@link SearchFailedException} usage example: QuizJDBCDAO dao = new ... try{
 * dao.quizSession(quizInstance); }catch(CreateFailed e){ //log exception }
 * 
 * @param quiz
 * @throws CreateFailedException
 * Creats a list mcqquizquestion 
 * gets the question, option1 - 4 and right option from the database
 * add all to the list mcqquiz question and returns it
 * 
 **/
public List<String> quizSession(String quizFind) throws SearchFailedException {
		
		ArrayList<String> mcqQuizQuestion = new ArrayList<String>();
		
		try (Connection connection = getConnection();
			PreparedStatement pstmt = connection.prepareStatement(GET_MCQ_QUESTION_ANSWER)){
			pstmt.setString(1, quizFind);
			ResultSet rs = pstmt.executeQuery();
		
			while (rs.next()) {
				String question = rs.getString("QUESTION");
				String option1 = rs.getString("OPTION1");
				String option2 = rs.getString("OPTION2");
				String option3 = rs.getString("OPTION3");
				String option4 = rs.getString("OPTION4");
				String rightOption = rs.getString("RIGHT_OPTION");
				
				int i = 0;
				
				mcqQuizQuestion.add(i,question);
				i++;
				mcqQuizQuestion.add(i,option1);
				i++;
				mcqQuizQuestion.add(i,option2);
				i++;
				mcqQuizQuestion.add(i,option3);
				i++;
				mcqQuizQuestion.add(i,option4);
				i++;
				mcqQuizQuestion.add(i,rightOption);
				i++;
			
			}
			rs.close();
			return mcqQuizQuestion;
		} catch (SQLException e) {
			throw new SearchFailedException(e);
		}
	}
	
/**
 * gets single answer question in the database, if a problem occurs then it throws an
 * {@link SEARCHFAILEDEXCEPTION} usage example: QuizJDBCDAO dao = new ... try{
 * dao.create(quizInstance); }catch(CreateFailed e){ //log exception }
 * 
 * @param quiz
 * @throws SearchFailedException
 * list single answer returns all quiz in the database
 * 
 **/
public List<String> singleAnswerQuestion(String quizFind) throws SearchFailedException {
		
		ArrayList<String> singleAnswer = new ArrayList<String>();
		
		try (Connection connection = getConnection();
			PreparedStatement pstmt = connection.prepareStatement(GET_SINGLE_QUESTION)){
			pstmt.setString(1, quizFind);
			ResultSet rs = pstmt.executeQuery();
		
			while (rs.next()) {
				String question = rs.getString("QUESTION");
				String option1 = rs.getString("ANSWER");
				
				int i = 0;
				
				singleAnswer.add(i,question);
				i++;
				singleAnswer.add(i,option1);
				i++;
			
			}
			rs.close();
			return singleAnswer;
		} catch (SQLException e) {
			JDBCO.logError("Searched quiz does not exist- Single answer questions");
			//throw new SearchFailedException(e);
		}
		return singleAnswer;
	}}
