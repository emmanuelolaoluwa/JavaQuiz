package fr.epita.quiz.launcher;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
/**
 * Main class
 * 
 *
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;
import fr.epita.quiz.datamodel.Answer;
import fr.epita.quiz.datamodel.Difficulty;
import fr.epita.quiz.datamodel.Mcqanswer;
import fr.epita.quiz.datamodel.Question;
import fr.epita.quiz.datamodel.Quiz;
import fr.epita.quiz.datamodel.studentQuestion;
import fr.epita.quiz.exception.CreateFailedException;
import fr.epita.quiz.exception.SearchFailedException;
import fr.epita.quiz.datamodel.studentAnswer;
import fr.epita.quiz.services.data.QuizJDBCDAO;
import java.util.Properties;

/**
 * 
 * @author emmanuel Luncher class - contains the following method</h5> main ()
 *         quizCreation() questionCreation() answerCreation() topics()
 *         displayMenu() questionMenu() getAllQuiz() updateQuiz()</h5>
 */
public class Launcher {
	/**
	 * MAIN CLASS
	 * 
	 * @param args
	 * @throws SQLException
	 * @throws Exception
	 * 
	 *                      Scanner scanner = new Scanner(System.in);
	 *                      <p>
	 *                      Creates a new instance of scanner
	 *                      </p>
	 *                      <p>
	 *                      Create a new dao instance to retrieve data from DB
	 *                      </p>
	 *                      <p>
	 *                      Get connection
	 *                      </p>
	 *                      <code>Object authenticated [] = QuizJDBCDAO.authenticate(scanner,connection ); </code>
	 *                      <p>
	 *                      Authenticates the user confirms if the user exists in
	 *                      the database
	 *                      </p>
	 *                      <p>
	 *                      an if statement to check if user name or password is
	 *                      wrong. Does not tell which is wrong for security reasons
	 *                      <p>
	 *                      <p>
	 *                      Authenticates as a professor or student
	 *                      </p>
	 *                      <p>
	 *                      A professor can add, update, insert quiz or question
	 *                      from the data base while a student cannot
	 *                      </p>
	 *                      <p>
	 *                      IF statement to display if log in was by a student or
	 *                      professor
	 *                      </p>
	 *                      <p>
	 *                      WHILELOOP if a lectuer was logged in displays the menu
	 *                      of available tasks
	 *                      </p>
	 *                      <p>
	 *                      CASE 1 Quiz creation
	 *                      </p>
	 *                      <p>
	 *                      Case 2 Question creation
	 *                      </p>
	 *                      <p>
	 *                      Case 3 get all quiz available in the database
	 *                      </p>
	 *                      <p>
	 *                      CASE 4 Search for a quiz either by topics or quizname
	 *                      </p>
	 *                      <p>
	 *                      CASE 5 Update quiz name
	 *                      </p>
	 *                      <p>
	 *                      CASE 6
	 *                      </p>
	 *                      <p>
	 *                      CASE q exit the system
	 *                      </p>
	 *                      <p>
	 *                      DEFAULT When an option is not recognized
	 *                      </p>
	 *                      <p>
	 *                      --------------------STUDENT----------- -
	 *                      </p>
	 *                      System.out.println("\n Welcome to your aptitude test,
	 *                      Select a quiz to take. Enter the text not the number i.e
	 *                      math, english");
	 *                      <p>
	 *                      Displays all the quiz available in the database
	 *                      <code>getAllQuiz(dao) </code>
	 *                      </p>
	 *                      <p>
	 *                      Gets all the single answer questions and multiple choice
	 *                      questions available questiontype is the input from the
	 *                      user for the quiz desired
	 *                      </p>
	 *                      <p>
	 *                      int countTotal = 0 - counts total questions taken int
	 *                      countCorrect = 0; - counts the correct question int
	 *                      countWrong = 0; - counts the wrong questions
	 *                      </p>
	 *                      <p>
	 *                      FOR - continues until end of quizSession list of quizzes
	 *                      </p>
	 *                      for (int i = 0; i <
	 *                      dao.quizSession(questiontype).size(); i++) {
	 *                      <p>
	 *                      IF - Because the the list returns all quizzes in a list.
	 *                      if the returned list size modulus 6 is 0 means you have
	 *                      reached 6 questions and you start operation only when
	 *                      its 6 12 24 32 those will give zero so its the start of
	 *                      a new quiz group. question, option1 option2 option3
	 *                      option4 and right options are returned
	 *                      <code> String option1 = 	dao.quizSession(questiontype).get(i);
				 i++;  - to go to the next item in list </code> studentQuestion
	 *                      class assigns the . question, option1 option2 option3
	 *                      option4 and right options and takes in new answer with
	 *                      the right option prints out the question and options
	 *                      </p>
	 *                      <p>
	 *                      DO takes in the string option to lower case and switches
	 *                      the option if the option is invalid it says there is an
	 *                      error breaks out of the loop when any of the options is
	 *                      inputed from a - d
	 *                      <p>
	 *                      <p>
	 *                      Compares the student answer with the right option. If
	 *                      wrong increment wrong and add 1 to total, if right
	 *                      increment right and add 1 also to total
	 *                      </p>
	 *                      <p>
	 *                      FOR single answer questions and compares to the size of
	 *                      array. in position 1 is the question in position 2 is
	 *                      answer Option is gotten from the user and compared to
	 *                      the answer increment total wrong and correct answers
	 *                      depending on which the user has gotten
	 *                      </p>
	 *                      <p>
	 *                      At the end of the quiz the total choice gotten is
	 *                      displayed out of total taken
	 *                      </p>
	 * 
	 */

	public static void main(String[] args) throws Exception {

		Scanner scanner = new Scanner(System.in);
		QuizJDBCDAO dao = new QuizJDBCDAO();
		Connection connection = getConnection();

		Object[] authenticated = QuizJDBCDAO.authenticate(scanner, connection);

		if (!(authenticated[0] instanceof Boolean)) {
			System.out.println("Invalid Username or Password");
			scanner.close();
			return;
		}

		System.out.print("You're authenticated as a ");

		if (Integer.parseInt(authenticated[1].toString()) == 0) {
			System.out.print("Student");
		} else {
			System.out.print("Professeur");
		}

		String answer = "";
		while (!answer.equals("q") && Integer.parseInt(authenticated[1].toString()) == 1) {

			answer = displayMenu(scanner);

			switch (answer) {
			case "1":
				quizCreation(scanner, dao);
				break;
			case "2":
				questionCreation(scanner, dao);
				break;
			case "3":
				getAllQuiz(dao);
				break;
			case "4":
				search(dao, scanner);
				break;
			case "5":
				update(dao, scanner);
				break;
			case "6":
				delete(dao, scanner);
				break;
			case "7":
				getScore(dao);
				break;
			case "q":
				System.out.println("Good bye!");
				System.exit(0);
				break;

			default:
				System.out.println("Enter anothers option");
				break;
			}
		}

		System.out.println("\n NOTE: Enter the Quiz text not the serial number  Welcome to your aptitude test, Enter a quiz to take. ");

		getAllQuiz(dao);

		String questiontype = scanner.nextLine();
		questiontype = questiontype.toLowerCase();

		int countTotal = 0;
		int countCorrect = 0;
		int countWrong = 0;

		for (int i = 0; i < dao.quizSession(questiontype).size(); i++) {

			if (dao.quizSession(questiontype).size() % 6 == 0) {
				String question = dao.quizSession(questiontype).get(i);
				i++;
				String option1 = dao.quizSession(questiontype).get(i);
				i++;
				String option2 = dao.quizSession(questiontype).get(i);
				i++;
				String option3 = dao.quizSession(questiontype).get(i);
				i++;
				String option4 = dao.quizSession(questiontype).get(i);
				i++;
				String rightOption = dao.quizSession(questiontype).get(i);
				System.out.println(i);

				studentQuestion studentquestion = new studentQuestion(question, option1, option2, option3, option4,
						new studentAnswer(rightOption));
				System.out.println(studentquestion.getQuestion());
				System.out.println("a. " + studentquestion.getOption1());
				System.out.println("b. " + studentquestion.getOption2());
				System.out.println("c. " + studentquestion.getOption3());
				System.out.println("d. " + studentquestion.getOption4());
				String temp = "";

				do {
					System.out.println("Enter option");
					String opt = scanner.nextLine();
					opt = opt.toLowerCase();

					String studentChoice = "";

					switch (opt) {
					case "a":
						studentChoice = studentquestion.getOption1();
						temp = "r";
						break;
					case "b":
						studentChoice = studentquestion.getOption2();
						temp = "r";
						break;
					case "c":
						studentChoice = studentquestion.getOption3();
						temp = "r";
						break;
					case "d":
						studentChoice = studentquestion.getOption4();
						temp = "r";
						break;
					default:
						System.out.println("Invalid option Enter one of the options");
						temp = "";
						break;
					}
				} while (temp != "r");
				if (!answer.equals(studentquestion.getStudentanswer().getAnswer())) {
					
					System.out.println("------------------------------");
					System.out.println("Correct Answer");
					System.out.println("------------------------------");
					countCorrect++;
					countTotal++;
				} else {

					System.out.println("------------------------------");
					System.out.println("Wrong Answer");
					System.out.println("------------------------------");
					countWrong++;
					countTotal++;
				}

			}

		}
		int totalLength = dao.singleAnswerQuestion(questiontype).size();
		for (int i = 0; i < totalLength ; i++) {

			String question = dao.singleAnswerQuestion(questiontype).get(i);
			i++;
			String option = dao.singleAnswerQuestion(questiontype).get(i);

			System.out.println(question);
		
			System.out.println("Enter option");
			String opt = scanner.nextLine();
			opt = opt.toLowerCase();

			if (opt.equals(option)) {
				System.out.println("------------------------------");
				System.out.println("Correct Answer");
				System.out.println("------------------------------");
				countCorrect++;
				countTotal++;

			} else {

				System.out.println("------------------------------");
				System.out.println("Wrong Answer");
				System.out.println("------------------------------");
				countWrong++;
				countTotal++;
			}

		}

		System.out.println("You got: " + countCorrect + "/" + countTotal);
		System.out.println("You missed: " + countWrong);

		dao.updateStudentQuiz(countCorrect, questiontype);

		scanner.close();

	}

	/**
	 * quizCreation()
	 * 
	 * @param scanner
	 * @param dao
	 * @throws Exception
	 *                   <p>
	 *                   Collects quiz name to be created from user
	 *                   </p>
	 *                   <p>
	 *                   converts to lower case for consistency
	 *                   </p>
	 *                   <p>
	 *                   dao.create() creates a new quiz in the database
	 *                   </p>
	 */
	private static void quizCreation(Scanner scanner, QuizJDBCDAO dao) throws CreateFailedException {
		System.out.println("Quiz creation ...");

		String quiz = "";

		do {

			System.out.println(" \n Enter Quiz");
			quiz = scanner.nextLine();

		} while (quiz.length() <= 0);

		quiz = quiz.toLowerCase();
		dao.create(new Quiz(quiz));
	}

	/**
	 * <h1>question(Creation)
	 * <h1>
	 * 
	 * @param scanner
	 * @param dao
	 * @throws Exception
	 *                   <p>
	 *                   questionCreation() created question in database - Takes the
	 *                   quiz name qu - converts to lower case to ensure consistency
	 *                   Quiz quiz = new Quiz(qu) : creates an instance of the class
	 *                   quiz - questionMenu(scanner): Displays 3 options of
	 *                   available type of questions that can be added - single
	 *                   questions, open questions and multiple choice questions
	 *                   String exiter - to store value when user wants to exit
	 *                   While loop - Exits only its equal to q when the user
	 *                   chooses to exit quiz creation Switch case 1 Creates single
	 *                   question types
	 *                   <code>	quest = questCreation(scanner); <code> <p> calls method question creation to get questions</p>  
				<code>	ans = answerCreation(scanner);</code>
	 *                   <p>
	 *                   Creates answers to the question
	 *                   </p>
	 *                   topic = topics(scanner);
	 *                   <p>
	 *                   get topics to question
	 *                   </p>
	 *                   <code>	Integer difficulty =  Difficulty.EASY.getDifficulty();</code>
	 *                   <p>
	 *                   This could not be implememted to get difficulty from method
	 *                   getDifficulty(). The method works fine but it keeps the
	 *                   questionCreation class in a loop so all questions would be
	 *                   set to easy
	 *                   </p>
	 *                   <code>	Question question = new Question(quest, topic , difficulty);</code>
	 *                   <p>
	 *                   Creates the clasee question adding questions, topics and
	 *                   difficulty
	 *                   </p>
	 *                   <code>	Answer answer = new Answer(ans);	</code>
	 *                   <p>
	 *                   Sets answer to the class instance
	 *                   </p>
	 *                   <code>	answer.setQuestion(question); </code>
	 *                   <p>
	 *                   Sets question to an answer
	 *                   </p>
	 *                   <code>	answer.setQuiz(quiz); </code>
	 *                   <p>
	 *                   Sets quiz to a question on the answer class
	 *                   </p>
	 *                   <p>
	 *                   difficult(scanner); Method works but could not be
	 *                   implemented because it keeps adding the questions in an
	 *                   infinit loop
	 *                   </p>
	 *                   <code>	dao.createAll(quiz, answer, question); </code>
	 *                   <p>
	 *                   Calls the dao.create method assigning the quiz, answer and
	 *                   question
	 *                   </p>
	 * 
	 *                   <code>	System.out.println("enter q to quit questiontype or Enter to continue adding single answer questions");
		exiter = scanner.nextLine(); </code>
	 *                   <p>
	 *                   Keep adding questions until user enters q as the exiter
	 *                   </p>
	 *                   case 2 - creates open question types
	 *                   <code> dao.addOpenQuestion(answer1, quiz);</code>
	 *                   <p>
	 *                   Description for open questions was skipped because it is
	 *                   the same as single answer questions the only difference is
	 *                   the dao.addopenquestion() method which creates an open
	 *                   question in the database assigning dependences in the DB
	 *                   </p>
	 *                   case 3 - created multiple choice questions
	 *                   <p>
	 *                   <p>
	 *                   Calls question(scanner) to create questions
	 *                   </p>
	 *                   <p>
	 *                   Calls on topic to create topics associated to the question
	 *                   </p>
	 *                   <p>
	 *                   String rp - collects the right option for the question
	 *                   </p>
	 *                   <p>
	 *                   op1, op2, op3, op4 - Collects the 4 options to the
	 *                   questions and converts them to lower case to ensure
	 *                   consistency
	 *                   </p>
	 *                   <p>
	 *                   Sets difficulty to the easy default because the
	 *                   difficult(scanner) method keeps the question in a loop
	 *                   </p>
	 *                   <p>
	 *                   Create the question class and assigns question, topic, and
	 *                   difficulty
	 *                   </p>
	 *                   <p>
	 *                   Create class mcQanswer McqAnswer sets question, right
	 *                   options and options to the class and returns toString()
	 *                   when needed
	 *                   </p>
	 *                   <code>	Mcqanswer mcqanswer = new Mcqanswer(); </code>
	 * 
	 *                   <code>	dao.addMcqQuestion(quiz, mcqanswer, question2); </code>
	 *                   <p>
	 *                   adds the quiz, answer and question to the dao to create in
	 *                   the DB
	 *                   </p>
	 *                   <code>	System.out.println("enter q to quit questiontype or Enter to continue adding muliple choice answer questions");
		exiter = scanner.nextLine(); </code>
	 *                   <p>
	 *                   Check if user wants to exit or keep adding multiple choice
	 *                   questions
	 *                   </p>
	 *                   <code>		
			break;
		case "q":
			System.exit(0);
			break;
	
		default:
			System.out.println("Option not recognized, please enter an other option");
			continue;
	</code>
	 *                   <p>
	 *                   Quits the loop when option is q and continues when option
	 *                   is not recognized
	 *                   </p>
	 *
	 */
	private static void questionCreation(Scanner scanner, QuizJDBCDAO dao) throws CreateFailedException {
		
		String qu = "";
		
		do {
		System.out.println("Enter Quiz");
		qu = scanner.nextLine();
		} while( qu.length() <= 0) ;
		
		qu = qu.toLowerCase();
		Quiz quiz = new Quiz(qu);

		System.out.println("Question creation ...");

		String quest;
		String ans;
		String[] topic;

			String questionType = questionMenu(scanner);
			switch (questionType) {
			case "1":
				quest = questCreation(scanner);
				ans = answerCreation(scanner);
				topic = topics(scanner);
				Integer difficulty = difficult(scanner);
				Question question = new Question(quest, topic, difficulty);
				Answer answer = new Answer(ans);
				answer.setQuestion(question);
				answer.setQuiz(quiz);
				dao.createAll(quiz, answer, question);
				System.out.println("Question Sucessfully !");
				break;
			case "2":
				quest = questCreation(scanner);
				ans = answerCreation(scanner);
				topic = topics(scanner);
				Integer difficulty1 = difficult(scanner);
				Question question1 = new Question(quest, topic, difficulty1);
				Answer answer1 = new Answer(ans);
				answer1.setQuestion(question1);
				answer1.setQuiz(quiz);

				dao.createAll(quiz, answer1, question1);
				dao.addOpenQuestion(answer1, quiz);
				System.out.println("Question Sucessfully added !");
				break;
			case "3":

				quest = questCreation(scanner);
				topic = topics(scanner);

				System.out.println("Enter the right option");
				String rp = scanner.nextLine();
				rp = rp.toLowerCase();

				System.out.println("Enter option 1");

				String op1 = scanner.nextLine();
				op1 = op1.toLowerCase();

				System.out.println("Enter option 2");
				String op2 = scanner.nextLine();
				op2 = op2.toLowerCase();

				System.out.println("Enter option 3");
				String op3 = scanner.nextLine();
				op3 = op3.toLowerCase();

				System.out.println("Enter option 4");
				String op4 = scanner.nextLine();
				op4 = op4.toLowerCase();
				Integer difficulty3 = difficult(scanner);
				Question question2 = new Question(quest, topic, difficulty3);

				Mcqanswer mcqanswer = new Mcqanswer();

				mcqanswer.setQuestion(question2);
				mcqanswer.setQuiz(quiz);
				mcqanswer.setOption1(op1);
				mcqanswer.setOption2(op2);
				mcqanswer.setOption3(op3);
				mcqanswer.setOption4(op4);
				mcqanswer.setRightoption(rp);

				dao.addMcqQuestion(quiz, mcqanswer, question2);
				System.out.println("Question Sucessfully added !");
				break;
			case "q":
				System.exit(0);
				break;

			default:
				System.out.println("Option not recognized, please enter an other option");
				break;
		}
	}

	private static int difficult(Scanner scanner) {
		
		//<p> Method to select difficulty but could not be added as it keeps the question in a loop due to unknown reasons for now </p>
		System.out.println("DIFFICULTY \n 0: VERY_EASY\n 1: EASY \n 2: MEDIUM \n 3: HARD \n 4: VERY_HARD \n 5: EXTREMELY_HARD");
		

			
			Integer difficulty = null;
			int choice;
			do {
			  try{
				    System.out.println("Enter Difficulty");
			        choice =scanner.nextInt();//<-- use this variable
			        switch (choice) {
					case 0:
						difficulty = Difficulty.VERY_EASY.getDifficulty();
						break;
					case 1 :
						difficulty = Difficulty.EASY.getDifficulty();
						break;
					case 2:
						difficulty = Difficulty.MEDIUM.getDifficulty();
						break;
					case 3:
						difficulty = Difficulty.HARD.getDifficulty();
						break;
					case 4:
						difficulty = Difficulty.VERY_HARD.getDifficulty();
						break;
					case 5:
						difficulty = Difficulty.EXTREMELY_HARD.getDifficulty();
						break;
					default:
						difficulty = Difficulty.EASY.getDifficulty();
						break;
					}
			        return difficulty;
			  
			  }
			     catch(InputMismatchException e){
			            System.out.println("Error: Menu selection must be an integer! Please try again:");
			     }
			  
			} while (difficulty == null);
			
			return difficulty;
				
	}
	private static String questCreation(Scanner scanner) {
		System.out.println("Enter your Question");
		return scanner.nextLine();

	}

	/**
	 * answerCreation()
	 * 
	 * @param scanner
	 * @return Gets input and return the answer for quiz inputed by user
	 *         <h3>String answer = scanner.nextLine(); return answer;</h3>
	 * 
	 */
	private static String answerCreation(Scanner scanner) {
		System.out.println("Enter your your answer");
		return scanner.nextLine();
	}

	/**
	 * method topics()
	 * 
	 * @param scanner
	 * @return This method takes in a scanner and requests for the length of topics
	 *         the user wants to enter initiates length to get the numeric value.
	 *         This only takes int and wont work if the user inputs a string Array
	 *         Topics () - stores inputed topics For loop - Stores the topics
	 *         entered into topics Topics is returned as an array
	 */
	private static String[] topics(Scanner scanner) {
		System.out.print("The length of topics for this question > ");
		int length = scanner.nextInt();
		scanner.nextLine();
		System.out.println("Enter Topics");
		String[] topics = new String[length];

		for (int i = 0; i < length; i++) {
			String word = scanner.nextLine();
			word = word.toLowerCase();
			topics[i] = word;
		}
		return topics;
	}

	/**
	 * 
	 * @param scanner
	 * @return
	 * 
	 *         This is the create menu: - create quiz - create question, - display
	 *         all quiz in the base - search for quiz based on topics or quiz name -
	 *         update quiz - q to quit the application - answer takes in the choice
	 *         of the user and returns it
	 */

	private static String displayMenu(Scanner scanner) {
		String answer;
		System.out.println("\n -- Menu --");
		System.out.println("1. Create Quiz");
		System.out.println("2. Create Question");
		System.out.println("3. Display quiz in base");
		System.out.println("4. Search for quiz");
		System.out.println("5. Update Quiz");
		System.out.println("6. Delete Quiz");
		System.out.println("7. View Students Submissions");
		System.out.println("q. Quit the application");
		System.out.println("What is your choice ? (1|2|q) :");
		answer = scanner.nextLine();
		return answer;
	}

	/**
	 * questionMenu()
	 * 
	 * @param scanner
	 * @return The question menu displays the type of questions that can be added
	 *         into the database by the professor - single answer questions - which
	 *         have only one option as answer and will be graded - open choice
	 *         questions - this type of questions will not be graded - multiple
	 *         choice questions - this type of questions will be graded - To quit
	 *         the question menu q has to be entered The scanner takes in the choice
	 *         from user and returns it
	 */

	private static String questionMenu(Scanner scanner) {
		String questionType;
		do {
		System.out.println("\n -- Question Type --");
		System.out.println("1. Single answer Questions");
		System.out.println("2. Openchoice question");
		System.out.println("3. Multichoice answer Questions");
		System.out.println("q. Quit question input");
		System.out.println("What is your choice ? (1|2|3|q) :");
		questionType = scanner.nextLine();
		return questionType;
		} while ( ! questionType.equals("1") || ! questionType.equals("2") || ! questionType.equals("3"));
		
	}

	/**
	 * Connection();
	 * 
	 * @return
	 * @throws IOException
	 * @throws SQLException
	 * @throws Exception
	 */

	private static Connection getConnection() throws SQLException, IOException {
		return DriverManager.getConnection("jdbc:h2:tcp://localhost/./database/quizDBB", "sa", pass());
	}

	/**
	 * getAllQuiz()
	 * 
	 * @param dao
	 * @throws Exception For loop to loop over list of quiz Printing all quiz
	 *                   available in the database
	 */
	private static void getAllQuiz(QuizJDBCDAO dao) throws SearchFailedException {
		for (int i = 0; i < dao.getAllQuiz().size(); i++) {
			System.out.println(i + ":" + dao.getAllQuiz().get(i));
		}
	}

	/**
	 * search(dao, scanner) throws Exception
	 * 
	 * @param dao
	 *                <h4>Takes in the DAO class</h4>
	 * @param scanner
	 * @throws Exception BOOLEAN isNumber to verify user input. If true user entered
	 *                   a right input A do while loop to get users choice of
	 *                   searching by topic or quiz name. Do until value enter
	 *                   corresponds. This was done to avoid wrong input from users
	 *                   if input == 1 : Search by Quiz name Scanner - Collect input
	 *                   from user Set a boolean is Number to true to indicate the
	 *                   right number was entered A list is created with the search
	 *                   results in it A loop to go over the returned list
	 * 
	 *                   if input == 2 : Search by Keyword Scanner - Collect input
	 *                   from user Set a boolean is Number to true to indicate the
	 *                   right number was entered Created List with the search
	 *                   results in it A loop to go over and print the returned list
	 * 
	 * 
	 */

	private static void search(QuizJDBCDAO dao, Scanner scanner) throws SearchFailedException {

		boolean isNumber = false;

		do {
			System.out.println("Enter 1: Search Quiz name \nEnter 2: Search Topic");
			int number = scanner.nextInt();
			if (number == 1) {

				System.out.println("Enter Keyword to search for");
				isNumber = true;
				scanner.nextLine();
				scanner.hasNext();
				System.out.println("Enter Keyword: ");
				String input = scanner.nextLine();
				input = input.toLowerCase();
				List<String> list = dao.search(input);
				for (int i = 0; i < dao.search(input).size(); i++) {
					System.out.println(i + ":" + list.get(i));
				}
			} else if (number == 2) {
				System.out.println("Enter topic keyword to search for");
				isNumber = true;
				scanner.nextLine();
				scanner.hasNext();
				System.out.println("Enter Keyword: ");
				String input = scanner.nextLine();
				input = input.toLowerCase();

				List<String> topics = dao.searchTopic(input);
				List<String> topicss = dao.searchTopicc(input);
				System.out.println(topics);
				System.out.println(topicss);
			} else {
				System.out.println("Enter a valid option");
			}
		} while (!isNumber);

	}

	/**
	 * update()
	 * 
	 * @param dao
	 * @param scanner
	 * @throws Exception scanner takes in value quiz to updatefrom and updateTo the
	 *                   new name from the user then calls the dao.update to perform
	 *                   the action.
	 * 
	 */

	private static void update(QuizJDBCDAO dao, Scanner scanner) throws Exception {
		System.out.println("Enter quiz to update from");
		scanner.hasNext();

		System.out.println("Enter new name");

		String updateFrom = scanner.nextLine();
		System.out.println(updateFrom);
		String updateTo = scanner.nextLine();
		System.out.println(updateTo);

		dao.update(updateFrom, updateTo);

	}

	public static String pass() throws IOException {
		Properties props = new Properties();
		File confFile = new File("conf.properties");
		FileInputStream ips = new FileInputStream(confFile);
		props.load(ips);

//using the properties
		return props.getProperty("db.password", "");

	}

	private static void delete(QuizJDBCDAO dao, Scanner scanner) throws SearchFailedException {
		System.out.println("Enter quiz to delete");
		scanner.hasNext();

		System.out.println("Enter Quiz");

		String deleteName = scanner.nextLine();
		System.out.println(deleteName);

		dao.delete(deleteName);

	}

	private static void getScore(QuizJDBCDAO dao) throws Exception {

		dao.getStudentScores();

	}
}
